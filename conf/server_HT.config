/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running the pipeline on  uman Technopole cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Use as follows:
        nextflow run EmanuelSoda/spatialtranscriptomics -profile server_ht --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

singularity.enabled = true
singularity.autoMounts = true
singularity.cacheDir = '/group/glastonbury/singularity-images/'
singularity.runOptions = ' --bind /group,/scratch '
process.executor = 'slurm'
process.clusterOptions = ' --partition=cpuq '
process.maxRetries = 5


// env {
//     PATH='$PATH:/hpcnfs/software/singularity/2.5.1/bin/:/hpcnfs/software/anaconda/anaconda3/bin/'
// }

params {
  // Limit resources so that this can run on GitHub Actions
  config_profile_name        = 'Config for server Human Technopole'
  config_profile_description = 'Config for server Human Technopole'
  max_cpus = 50
  max_memory = 200.GB
  max_time = 800.h
}

process {
    withName: 'NFCORE_SPATIALTRANSCRIPTOMICS:ST:FASTQC' {
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    } 
    withName: 'NFCORE_SPATIALTRANSCRIPTOMICS:ST:SPACERANGER:SPACERANGER_UNTAR_REFERENCE' {
        cpus = { check_max( 10 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    }
    withName: 'NFCORE_SPATIALTRANSCRIPTOMICS:ST:SPACERANGER:SPACERANGER_COUNT' {
        cpus = { check_max( 32 * task.attempt, 'cpus') }
        memory = { check_max( 128.GB * task.attempt, 'memory') }
    }
    withName: 'NFCORE_SPATIALTRANSCRIPTOMICS:ST:ST_READ_DATA' {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 32.GB * task.attempt, 'memory') }
    }
     withName: 'NFCORE_SPATIALTRANSCRIPTOMICS:ST:CUSTOM_DUMPSOFTWAREVERSIONS' {
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    }
    withName: 'NFCORE_SPATIALTRANSCRIPTOMICS:ST:ST_POSTPROCESS:ST_CLUSTERING' {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
    }
    withName: 'NFCORE_SPATIALTRANSCRIPTOMICS:ST:ST_PREPROCESS:ST_QC_AND_NORMALISATION' {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
    }
    withName: 'NFCORE_SPATIALTRANSCRIPTOMICS:ST:ST_POSTPROCESS:ST_SPATIAL_DE' {
        cpus = { check_max( 10 * task.attempt, 'cpus') }
        memory = { check_max( 40.GB * task.attempt, 'memory') }
    }
}



